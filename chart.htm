<html lang="en">
<head>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=PT+Serif:400,700,400italic' rel='stylesheet' type='text/css'>
    <link href='https://netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.css' rel='stylesheet' type='text/css'>
    <link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css' rel='stylesheet' type='text/css'>
    <link href="metricsgraphics/metricsgraphics.css" rel="stylesheet" type="text/css" id="dark">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.11/d3.min.js" charset="utf-8"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script src='metricsgraphics/metricsgraphics.min.js'></script>
    
    <style>
        div.chart svg {
            margin-left:-20px;
            margin-top:-40px;
        }
    </style>
</head>
<body onload="loadGraph(window.location.search)">       
    <div style="width:300px; height:150px;" id='chart' class='chart'>
    </div>
    <script src='metricsgraphics/main.js'></script>
    <script>
        var items = [];
        var end_date = convertDate(new Date((new Date()).valueOf() - 1000*60*60*24*1));
        var start_date = convertDate(new Date((new Date()).valueOf() - 1000*60*60*24*184));
        var globals = {
            "url_base":"https://crash-stats.mozilla.com/search/?",
            "mouseover":function(d,i) {
                var next = new Date(d.date.valueOf()+1*24*60*60*1000);
                d3.select('svg .mg-active-datapoint')
                    .text();
                globals.url = globals.url_base + "&date=>%3D" + convertDate(d.date) + "&date=%3C" + convertDate(next);
            }
        };
        
        function convertDate(d) {
            var day = (d.getDate() < 10) ? '0' + d.getDate().toString() : d.getDate().toString();
            var month = ((d.getMonth()+1) < 10) ? '0' + (d.getMonth()+1).toString() : (d.getMonth()+1).toString();
            var year = d.getFullYear().toString();
            return year + '-' + month + '-' + day;
        }
        
        function getSignaturesFromURL(search) {
            var index = search.indexOf("?s=");
            search = search.substring(index+3);
            var signatures = search.split("\\");
            
            var result = "";
            for (var i=0; i<signatures.length; i++) {
                if (i != 0) result = result + "&";
                result = result + "signature=~" + signatures[i];
            }
            return result;
        }
            
        function loadGraph(search) {
            var signatures = getSignaturesFromURL(search);
            var url = "https://crash-stats.mozilla.com/api/SuperSearch/?" + signatures + "&date=%3E%3D" + start_date + "&date=%3C%3D" + end_date + "&_histogram.date=_cardinality.install_time&_histogram_interval=1d";
            globals.url_base = globals.url_base + signatures;

            for (var i=0; i<184; i++) {
                items.push({
                    "date":convertDate(new Date((new Date()).valueOf() - 1000*60*60*24*i)),
                     "count":0,
                     "installs":0
                });
            }

            if (items.length >= 184) {
                console.log(items);
                    var processed = 0;
		    d3.json(url, function(data) {
		        $.each(data, function(key, value) {
		          if (key == "facets") {
		            var histogram_date = value.histogram_date;
		            $.each(histogram_date, function(key, value) {
                                for (var i=0; i<items.length; i++) {
                                     if (items[i].date == value.term.substring(0,10)) {
                                         items[i].count = value.count;
                                         items[i].installs = value.facets.cardinality_install_time.value;
                                     }
                                }
		                processed = processed + 1;

		                if (processed >= histogram_date.length) {
		                    items = MG.convert.date(items, 'date');
		                    MG.data_graphic({
		                        data: items,
		                        width: 300,
		                        height: 170,
		                        target: document.getElementById('chart'),
		                        x_accessor: 'date',
		                        y_accessor: 'count',
		                        yax_count: 3,
		                        chart_type: "line",
		                        mouseover: globals.mouseover
		                    });
		                    var mouseouts = d3.selectAll('.mg-rollover-rect rect').on('mouseout');
		                    d3.selectAll('.mg-rollover-rect rect')
		                        .on('click', function(d) {
		                            window.open(globals.url, '_blank');
		                        });
		                }
		            });
		          }
		        });
		    });
            }
        }
    </script>
</body>
</html>


